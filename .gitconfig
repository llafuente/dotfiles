# [user]
#    name = llafuente
#    email = llafuente@noboxout.com
#


# git filter-branch --env-filter 'newname="llafuente" newemail="llafuente@noboxout.com" GIT_AUTHOR_EMAIL="$newemail" GIT_COMMITTER_EMAIL="$newemail" GIT_AUTHOR_NAME="$newname" GIT_COMMITTER_NAME="$newname"' HEAD

[color]
    ui = auto
[core]
    editor = vim
    autocrlf = input
    fileMode = false
[merge]
    tool = diffmerge
    ff = true
[alias]
    # force pull (stash + pull + stash pop)
    fpull = !sh -c 'git stash && git pull && git stash pop'
    m = checkout master
    d = checkout develop
    co = checkout
    br = branch
    ci = commit
    st = status # status
    sst = status -s # short status
    df = difftool -y
    unstage = reset HEAD --
    last = log -1 HEAD
    mergebranch = merge --no-ff
    contrib = shortlog -se

    y = diff "@{yesterday}"
    ls = log --oneline --decorate
    lls = log --pretty=format:'%Cred%h%Creset -%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
    llm = log --pretty=format:'%Cred%h%Creset -%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --name-only
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --all
    lgn = "!f() { git log --graph --pretty=format:'%Cred%H%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --date=relative $@ | git name-rev --stdin --name-only ; } ; f"
    ahead = log origin/master..HEAD --oneline
    stu = "!sh -c \"git fetch origin; git status\""
    mg = merge --ff-only
    rmall = !sh -c \"git diff --diff-filter=D --name-only -z | xargs -0 git rm\"
    new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
    sortdiff = !sh -c 'git diff "$@" | grep "^[+-]" | sort --key=1.2 | uniq -u -s1'
    pack = !sh -c 'git archive --format=tar.gz -o git log $1@{1}..$1@{0} "$@"'
    changes = log --name-status --oneline live/master..HEAD
    cat = !sh -c \"git show $2:$1\"
    ap = apply --index
    pa = format-patch --stdout
    update-library = merge --squash -s subtree --no-commit
    reset-branch = "!f() { git branch -D $1 && git branch -t $1 \"origin/${1}\"; }; f"

    # time sine last commit
    time = "!f() { last_commit=`git log --pretty=format:'%at' -1 2> /dev/null`;  now=`date +%s`;  seconds_since_last_commit=$((now - last_commit)); MINUTES=$((seconds_since_last_commit / 60)); HOURS=$((seconds_since_last_commit/3600)); DAYS=$((seconds_since_last_commit / 86400)); SUB_HOURS=$((HOURS % 24)); SUB_MINUTES=$((MINUTES % 60)); if [ \"$HOURS\" -gt 24 ]; then echo \"(${DAYS}d${SUB_HOURS}h${SUB_MINUTES}m)\"; elif [ \"$MINUTES\" -gt 60 ]; then echo \"(${HOURS}h${SUB_MINUTES}m)\"; else echo \"(${MINUTES}m)\"; fi; }; f"
    # time between last two commits
    time2 = "!f() { seconds_since_last_commit=`git log --pretty=format:'%at' -2 | awk 'BEGIN {l=1; last_commit=0;}; {if(l == 1) {last_commit=$0} else {print last_commit-$0} l++;}'`; MINUTES=$((seconds_since_last_commit / 60)); HOURS=$((seconds_since_last_commit/3600)); DAYS=$((seconds_since_last_commit / 86400)); SUB_HOURS=$((HOURS % 24)); SUB_MINUTES=$((MINUTES % 60)); if [ \"$HOURS\" -gt 24 ]; then echo \"(${DAYS}d${SUB_HOURS}h${SUB_MINUTES}m)\"; elif [ \"$MINUTES\" -gt 60 ]; then echo \"(${HOURS}h${SUB_MINUTES}m)\"; else echo \"(${MINUTES}m)\"; fi; }; f"

    # git flow alias
    # flow feature start
    # stash, pull, gitflow, pop

    # last commit rejected, just want to rebase (that it's disabled in my config)
    rebaselast = "!f() { \
      STASH=$(git status --untracked-files=no --porcelain); \
      (if [ -n \"$STASH\" ]; then echo \"uncomitted changes\"; exit 1; fi) && \
      MESSAGE=`git log -1 --pretty=%B`; \
      git reset HEAD~1 && \
      git stash && \
      git pull && \
      git stash pop && \
      git commit -a -m \"${MESSAGE}\" && \
      git push; \
      }; f"


    pullm = "!f() { git checkout master && git pull; }; f"
    pulld = "!f() { git checkout develop && git pull; }; f"
    pushm = "!f() { git checkout master && git push; }; f"
    pushd = "!f() { git checkout develop && git push; }; f"

    ffs = "!f() { \
      STASH=$(git status --untracked-files=no --porcelain); \
      (if [ -n \"$STASH\" ]; then git stash save \"ffs $1\"; fi;) && \
      git checkout develop && \
      git pull && \
      git flow feature start $feature $1 && \
      (if [ -n \"$STASH\" ]; then git stash pop; fi;) \
      }; f"
    # flow feature finish
    # stash, pull develop, gitflow, push, pop
    fff = "!f() { \
      STASH=$(git status --untracked-files=no --porcelain); \
      (if [ -n \"$STASH\" ]; then git stash; fi;) && \
      git checkout develop && \
      git pull && \
      git flow feature finish $1 && \
      git push; \
      if [ -n \"$STASH\" ]; then git stash pop; fi; \
      } ; f"

    ffc = flow feature checkout
    fft = flow feature track
    ffp = flow feature pull
    fpp = flow feature publish

    # [stash,] pull, hotfix start, [unstash]
    frs = "!f() { \
      STASH=$(git status --untracked-files=no --porcelain); \
      (if [ -n \"$STASH\" ]; then git stash; fi;) && \
      git pullm && git pulld && \
      git flow release start $1 && \
      if [ -n \"$STASH\" ]; then git stash pop; fi; \
      } ; f"

    # pull, release finish, push, co develop
    frf = "!f() { \
      STASH=$(git status --untracked-files=no --porcelain); \
      (if [ -n \"$STASH\" ]; then echo \"uncomitted changes\"; exit 1; fi;) && \
      git pullm && git pulld && \
      git flow release finish $1 && \
      git pushm && git pushd && \
      git push --tags && \
      git checkout develop; \
      } ; f"

    # [stash,] pull, hotfix start, [unstash]
    fhs = "!f() { \
      STASH=$(git status --untracked-files=no --porcelain); \
      (if [ -n \"$STASH\" ]; then git stash; fi;) && \
      git pullm && git pulld && \
      git flow hotfix start $1 && \
      if [ -n \"$STASH\" ]; then git stash pop; fi; \
      } ; f"

    # pull, hotfix finish, push, co develop
    fhf = "!f() { \
      STASH=$(git status --untracked-files=no --porcelain); \
      (if [ -n \"$STASH\" ]; then echo \"uncomitted changes\"; exit 1; fi;) && \
      git pullm && git pulld && \
      git flow hotfix finish $1 && \
      git pushm && git pushd && \
      git push --tags && \
      git checkout develop; \
    } ; f"

    # ignore file locally
    ignore = update-index --assume-unchanged
    unignore = update-index --no-assume-unchanged
    ignored = !git ls-files -v | grep "^[[:lower:]]"

    # presentations
    next= "f() { git checkout `git rev-list --topo-order HEAD..$1 | tail -1`} f"
    prev= "F() { git checkout `git rev-list --topo-order HEAD..$1 | head -1`} f"
[push]
    default = upstream
[branch]
    # 'autosetuprebase = always'
    autosetuprebase = never
[diff]
    guitool = kdiff3
    tool = kdiff3
    renames = copies
[mergetool]
    keepBackup = false
[difftool "diffmerge"]
    cmd = diffmerge $LOCAL $REMOTE
[mergetool "diffmerge"]
    cmd = diffmerge --merge -t1=\"Existing file in tree\" -t2=\"Base and result file\" -t3=\"New changes to apply\" --result=$MERGED $LOCAL $BASE $REMOTE
[difftool "kdiff3"]
    cmd = /usr/bin/kdiff3 $BASE $LOCAL $REMOTE -o $MERGED
    keepBackup = false
    trustExitCode = false
