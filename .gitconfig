#[user]
#    name = llafuente
#    email = llafuente@noboxout.com
#

# git filter-branch --env-filter 'newname="llafuente" newemail="llafuente@noboxout.com" GIT_AUTHOR_EMAIL="$newemail" GIT_COMMITTER_EMAIL="$newemail" GIT_AUTHOR_NAME="$newname" GIT_COMMITTER_NAME="$newname"' HEAD

[color]
    ui = auto
[core]
    editor = vim
    autocrlf = input
    fileMode = false
[merge]
    tool = diffmerge
    ff = true
[alias]
    # force pull (stash + pull + stash pop)
    fpull = !sh -c 'git stash && git pull && git stash pop'
    m = checkout master
    d = checkout develop
    co = checkout
    br = branch
    ci = commit
    st = status # status
    sst = status -s # short status
    df = difftool -y
    unstage = reset HEAD --
    last = log -1 HEAD
    mergebranch = merge --no-ff
    contrib = shortlog -se

    y = diff "@{yesterday}"
    ls = log --oneline --decorate
    lls = log --pretty=format:'%Cred%h%Creset -%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
    llm = log --pretty=format:'%Cred%h%Creset -%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --name-only
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --all
    lgn = "!f() { git log --graph --pretty=format:'%Cred%H%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --date=relative $@ | git name-rev --stdin --name-only ; } ; f"
    ahead = log origin/master..HEAD --oneline
    stu = "!sh -c \"git fetch origin; git status\""
    mg = merge --ff-only
    rmall = !sh -c \"git diff --diff-filter=D --name-only -z | xargs -0 git rm\"
    new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
    sortdiff = !sh -c 'git diff "$@" | grep "^[+-]" | sort --key=1.2 | uniq -u -s1'
    pack = !sh -c 'git archive --format=tar.gz -o git log $1@{1}..$1@{0} "$@"'
    changes = log --name-status --oneline live/master..HEAD
    cat = !sh -c \"git show $2:$1\"
    ap = apply --index
    pa = format-patch --stdout
    update-library = merge --squash -s subtree --no-commit

    # time sine last commit
    time = "!f() { last_commit=`git log --pretty=format:'%at' -1 2> /dev/null`;  now=`date +%s`;  seconds_since_last_commit=$((now - last_commit)); MINUTES=$((seconds_since_last_commit / 60)); HOURS=$((seconds_since_last_commit/3600)); DAYS=$((seconds_since_last_commit / 86400)); SUB_HOURS=$((HOURS % 24)); SUB_MINUTES=$((MINUTES % 60)); if [ \"$HOURS\" -gt 24 ]; then echo \"(${DAYS}d${SUB_HOURS}h${SUB_MINUTES}m)\"; elif [ \"$MINUTES\" -gt 60 ]; then echo \"(${HOURS}h${SUB_MINUTES}m)\"; else echo \"(${MINUTES}m)\"; fi; }; f"
    # time between last two commits
    time2 = "!f() { seconds_since_last_commit=`git log --pretty=format:'%at' -2 | awk 'BEGIN {l=1; last_commit=0;}; {if(l == 1) {last_commit=$0} else {print last_commit-$0} l++;}'`; MINUTES=$((seconds_since_last_commit / 60)); HOURS=$((seconds_since_last_commit/3600)); DAYS=$((seconds_since_last_commit / 86400)); SUB_HOURS=$((HOURS % 24)); SUB_MINUTES=$((MINUTES % 60)); if [ \"$HOURS\" -gt 24 ]; then echo \"(${DAYS}d${SUB_HOURS}h${SUB_MINUTES}m)\"; elif [ \"$MINUTES\" -gt 60 ]; then echo \"(${HOURS}h${SUB_MINUTES}m)\"; else echo \"(${MINUTES}m)\"; fi; }; f"

    # git flow alias
    fs = flow feature start --fetch
    ff = "!f() { git flow feature finish --fetch $1 && git push ; } ; f"
    fc = flow feature checkout
    ft = flow feature track
    fp = flow feature pull
    fpp = flow feature publish
    rs = flow release start --fetch
    rf = "!f() { flow release finish --fetch $1 && git push && git co master && git push && git push --tags && git co develop; } ; f"
    hs = flow hotfix start
    hf = "!f() { flow hotfix finish --fetch $1 && git push && git co master && git push && git push --tags && git co develop; } ; f"

[push]
    default = upstream
[branch]
    # 'autosetuprebase = always'
    autosetuprebase = never
[diff]
    guitool = kdiff3
    tool = kdiff3
    renames = copies
[mergetool]
    keepBackup = false
[difftool "diffmerge"]
    cmd = diffmerge $LOCAL $REMOTE
[mergetool "diffmerge"]
    cmd = diffmerge --merge -t1=\"Existing file in tree\" -t2=\"Base and result file\" -t3=\"New changes to apply\" --result=$MERGED $LOCAL $BASE $REMOTE
[difftool "kdiff3"]
    cmd = /usr/bin/kdiff3 $BASE $LOCAL $REMOTE -o $MERGED
    keepBackup = false
    trustExitCode = false
